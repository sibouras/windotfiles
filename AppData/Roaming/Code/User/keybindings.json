// Place your key bindings in this file to override the defaultsauto[]
[
  // Trigger vspacecode in empty editor group
  {
    "key": "space",
    "command": "vspacecode.space",
    "when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
  },
  // Keybindings required for edamagit
  // https://github.com/kahole/edamagit#vim-support-vscodevim
  // Cannot be added to package.json because keybinding replacements
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },
  // Extra ref menu support for edamagit with the key "y"
  // Cannot be added to package.json because keybinding replacements
  {
    "key": "y",
    "command": "-magit.show-refs"
  },
  {
    "key": "y",
    "command": "vspacecode.showMagitRefMenu",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
  },
  // Easy navigation in quick open/QuickPick
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Easy navigation in sugesstion/intellisense
  // Cannot be added to package.json because of conflict with vim's default bindings
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
  // Cannot be added to package.json because of conflict with vim's default bindings
  {
    "key": "ctrl+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  // Add ctrl+h/l to navigate in file browser
  {
    "key": "ctrl+h",
    "command": "file-browser.stepOut",
    "when": "inFileBrowser"
  },
  {
    "key": "ctrl+l",
    "command": "file-browser.stepIn",
    "when": "inFileBrowser"
  },
  // Custom keybindings
  {
    "key": "shift+k",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  },
  // {
  //     "key": "ctrl+h",
  //     "command": "workbench.action.focusSideBar"
  // },
  // {
  //     "key": "ctrl+l",
  //     "when": "sideBarFocus",
  //     "command": "workbench.action.focusActiveEditorGroup"
  // },
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "o",
    "command": "list.toggleExpand",
    "when": "!inputFocus"
  },
  {
    "key": "h",
    "command": "list.collapse",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "v",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+a",
    "command": "-file-browser.actions",
    "when": "inFileBrowser"
  },
  {
    "key": "ctrl+o",
    "command": "file-browser.actions",
    "when": "inFileBrowser"
  },
  // cursor end of line: emulate bash
  // {
  //     "key": "ctrl+a",
  //     "command": "cursorLineStart",
  //     "when": "textInputFocus && vim.mode == 'Insert'"
  // },
  {
    "key": "ctrl+e",
    "command": "cursorLineEnd",
    "when": "textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+a",
    "command": "cursorHome",
    "when": "textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+f",
    "command": "cursorRight",
    "when": "textInputFocus && vim.mode == 'Insert'"
  },
  // {
  //   "key": "ctrl+b",
  //   "command": "cursorLeft",
  //   "when": "textInputFocus && vim.mode == 'Insert'"
  // },
  {
    "key": "alt+f",
    "command": "cursorWordRight",
    "when": "textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "alt+b",
    "command": "cursorWordLeft",
    "when": "textInputFocus && vim.mode == 'Insert'"
  },
  {
    "key": "shift+alt+w",
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },
  {
    "key": "ctrl+shift+alt+v",
    "command": "toggleVim"
  },
  {
    "key": "ctrl+alt+s",
    "command": "search.action.focusSearchList"
  },
  {
    "key": "alt+n",
    "command": "editor.emmet.action.nextEditPoint"
  },
  {
    "key": "shift+alt+n",
    "command": "editor.emmet.action.prevEditPoint"
  },
  {
    "key": "ctrl+'",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "shift+alt+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+alt+pagedown",
    "command": "-workbench.action.terminal.scrollDown",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+,",
    "command": "keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+k",
    "command": "-keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "shift+alt+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+alt+pageup",
    "command": "-workbench.action.terminal.scrollUp",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+m",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.lastEditorInGroup"
  },
  {
    "key": "ctrl+9",
    "command": "-workbench.action.lastEditorInGroup"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "ctrl+0",
    "command": "-workbench.action.focusSideBar"
  },
  {
    "key": "alt+d",
    "command": "workbench.panel.repl.view.focus"
  },
  {
    "key": "shift+alt+pageup",
    "command": "extension.vim_ctrl+pageup",
    "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl"
  },
  {
    "key": "ctrl+pageup",
    "command": "-extension.vim_ctrl+pageup",
    "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl"
  },
  {
    "key": "shift+alt+pagedown",
    "command": "extension.vim_ctrl+pagedown",
    "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl"
  },
  {
    "key": "ctrl+pagedown",
    "command": "-extension.vim_ctrl+pagedown",
    "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl"
  }
]
